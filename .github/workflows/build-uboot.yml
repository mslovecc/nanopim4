name: Build U-Boot for NanoPi M4 (2G)

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - 'u-boot/**'
  schedule:
    - cron: '0 0 * * MON'  # 每周一自动检查更新

env:
  BOARD: nanopi-m4-2gb-rk3399  # 特定设备配置
  CROSS_COMPILE: aarch64-linux-gnu-
  ARCH: arm64
  BL31_SOURCE: "rk3399_bl31_v1.36.elf"  # Rockchip BL31 版本

jobs:
  build-uboot:
    runs-on: ubuntu-22.04
    timeout-minutes: 25

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup U-Boot source
      run: |
        if [ -d "u-boot" ]; then
          echo "Using existing U-Boot source"
        else
          echo "Cloning U-Boot mainline"
          git clone --depth 1 --branch v2024.07 https://github.com/u-boot/u-boot.git u-boot
        fi

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          gcc-aarch64-linux-gnu \
          gcc-arm-linux-gnueabihf \
          device-tree-compiler \
          libncurses-dev \
          flex bison \
          python3 python3-dev python3-distutils \
          swig libssl-dev \
          zip

    - name: Prepare Rockchip binaries
      run: |
        if [ ! -d "rkbin" ]; then
          git clone --depth 1 https://github.com/rockchip-linux/rkbin.git
        fi
        # 复制必要的 Rockchip 二进制文件
        cp rkbin/bin/rk33/${{ env.BL31_SOURCE }} u-boot/arch/arm/mach-rockchip/bl31.bin

    - name: Configure U-Boot
      run: |
        cd u-boot
        make CROSS_COMPILE=${{ env.CROSS_COMPILE }} distclean
        make CROSS_COMPILE=${{ env.CROSS_COMPILE }} ${{ env.BOARD }}_defconfig
        
    - name: Customize configuration for 2GB model
      run: |
        cd u-boot
        # 为 2GB 型号设置特定配置
        ./scripts/config --disable CONFIG_SPL_FIT_HW_CRYPTO
        ./scripts/config --set-val CONFIG_SYS_MALLOC_LEN 0x2000000  # 增加内存池
        ./scripts/config --enable CONFIG_SPL_DM_SERIAL
        ./scripts/config --enable CONFIG_CMD_PMIC
        ./scripts/config --disable CONFIG_ROCKCHIP_EFUSE
        
        # 应用配置更改
        make olddefconfig

    - name: Build U-Boot
      run: |
        cd u-boot
        time make CROSS_COMPILE=${{ env.CROSS_COMPILE }} -j$(nproc) all
        
        # 验证关键文件存在
        [ -f u-boot.bin ] || exit 1
        [ -f idbloader.img ] || exit 1
        [ -f u-boot.itb ] || exit 1

    - name: Prepare artifacts
      run: |
        cd u-boot
        mkdir -p artifacts/nanopi-m4-2g
        
        # 复制关键文件
        cp u-boot.bin artifacts/nanopi-m4-2g/
        cp u-boot.itb artifacts/nanopi-m4-2g/
        cp idbloader.img artifacts/nanopi-m4-2g/
        cp spl/u-boot-spl artifacts/nanopi-m4-2g/
        
        # 设备树文件
        if [ -f arch/arm/dts/${{ env.BOARD }}.dtb ]; then
          cp arch/arm/dts/${{ env.BOARD }}.dtb artifacts/nanopi-m4-2g/
        elif [ -f arch/arm/dts/${{ env.BOARD }}.dtb ]; then
          cp arch/arm/dts/${{ env.BOARD }}.dtb artifacts/nanopi-m4-2g/
        else
          echo "Warning: Device tree not found"
        fi
        
        # 添加烧录说明
        cat > artifacts/nanopi-m4-2g/FLASH_INSTRUCTIONS.txt << EOF
        ========= NanoPi M4 (2G) U-Boot 烧录指南 =========
        
        1. 确保SD卡已插入电脑（设备路径：/dev/sdX，请替换为实际设备）
        2. 取消所有挂载：sudo umount /dev/sdX*
        3. 烧写引导加载器：
           sudo dd if=idbloader.img of=/dev/sdX seek=64 conv=fsync
        4. 烧写U-Boot主体：
           sudo dd if=u-boot.itb of=/dev/sdX seek=16384 conv=fsync
        
        对于eMMC设备：
           sudo dd if=idbloader.img of=/dev/mmcblkX seek=64
           sudo dd if=u-boot.itb of=/dev/mmcblkX seek=16384
        
        完成！将SD卡插入NanoPi M4启动
        EOF

        # 生成构建信息
        echo "U-Boot version: $(git describe)" > artifacts/nanopi-m4-2g/BUILD_INFO
        echo "Build date: $(date)" >> artifacts/nanopi-m4-2g/BUILD_INFO
        echo "Target board: ${{ env.BOARD }}" >> artifacts/nanopi-m4-2g/BUILD_INFO
        echo "Compiler: $(${{ env.CROSS_COMPILE }}gcc --version | head -1)" >> artifacts/nanopi-m4-2g/BUILD_INFO
        echo "Host OS: $(uname -a)" >> artifacts/nanopi-m4-2g/BUILD_INFO
        echo "Git commit: $(git rev-parse HEAD)" >> artifacts/nanopi-m4-2g/BUILD_INFO
        
        # 创建ZIP存档
        cd artifacts
        zip -r nanopi-m4-2g-uboot.zip nanopi-m4-2g

    # 修复点：更新 upload-artifact 到 v4 版本
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nanopi-m4-2g-uboot
        path: u-boot/artifacts/nanopi-m4-2g-uboot.zip

    # 使用正确的发布操作
    - name: Create GitHub release (manual builds)
      if: ${{ github.event_name == 'workflow_dispatch' }}
      uses: softprops/action-gh-release@v1
      with:
        files: u-boot/artifacts/nanopi-m4-2g-uboot.zip
        tag_name: nanopi-m4-2g-uboot-${{ github.run_id }}
        body: |
          **NanoPi M4 (2G版) U-Boot 编译成果**
          
          构建包含：
          - idbloader.img：Rockchip 第一级引导
          - u-boot.itb：U-Boot 主映像
          - ${{ env.BOARD }}.dtb：设备树二进制
          - 烧录指南
          
          此构建适用于：
          - Rockchip RK3399 平台
          - 2GB LPDDR4 内存型号
          - Linux 6.0+ 内核
